require 'yaml'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

metadata_beta = YAML.load_file('metadata-beta.yaml')
metadata_beta_release_notes = File.open('metadata-beta-release-notes.txt').read

platform :ios do
  desc "Pull code-signing certificates for development"
  lane :development_pull do
    match(type: "development", readonly: true)
  end

  desc "Synchronise all code-signing certificates. Useful when entitlements have changed"
  lane :cs_sync do
    development_sync
    appstore_sync
  end

  desc "Synchronise code-signing certificates for development. Useful when devices have changed"
  lane :development_sync do
    ensure_git_status_clean unless ENV['FL_NO_ENSURE_CLEAN']
    register_devices(devices_file: "fastlane/devices.txt")
    match(type: "development", force_for_new_devices: true)
  end

  desc "Synchronise code-signing certificates for App Store"
  lane :appstore_sync do
    ensure_git_status_clean unless ENV['FL_NO_ENSURE_CLEAN']
    match(type: "appstore")
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    ensure_git_status_clean unless ENV['FL_NO_ENSURE_CLEAN']
    setup_ci if is_ci
    match(type: "appstore", readonly: true)
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "pub", "run", "build_runner", "build")
    sh("flutter", "build", "ios", "--release", "--no-codesign")
    build_app(
      workspace: "ios/Runner.xcworkspace",
      scheme: "Runner",
    )
    upload_to_testflight(
      skip_waiting_for_build_processing: is_ci,
    )
  end

  desc "Distribute the TestFlight beta build"
  lane :beta_distribute do
    version = YAML.load_file('../pubspec.yaml')["version"]
    version_name, _, build_number = version.rpartition("+")
    upload_to_testflight(
      app_platform: 'ios',
      distribute_only: true,
	  reject_build_waiting_for_review: false,
	  submit_beta_review: true,
      build_number: build_number,
      distribute_external: true,
      groups: metadata_beta["groups"]["ios"],
      localized_app_info: {
        "default": {
          feedback_email: metadata_beta["feedback_email"],
          marketing_url: metadata_beta["marketing_url"],
          privacy_policy_url: metadata_beta["privacy_policy_url"],
          description: metadata_beta["description"],
        },
      },
      localized_build_info: {
        "default": {
          whats_new: metadata_beta["task"] + "\nRelease notes:\n" + metadata_beta_release_notes,
        },
      },
    )
  end
end

platform :android do
  desc "Push a new beta build to Firebase"
  lane :beta do
    ensure_git_status_clean unless ENV['FL_NO_ENSURE_CLEAN']
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "pub", "run", "build_runner", "build")
    sh("flutter", "build", "apk", "--release")
    firebase_app_distribution(
      app: "1:825250749124:android:721cb5ab745db555090791",
      android_artifact_path: "build/app/outputs/flutter-apk/app-release.apk",
      groups: metadata_beta["groups"]["android"],
      release_notes: metadata_beta["task"] + "\nRelease notes:\n" + metadata_beta_release_notes,
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    sh("flutter", "pub", "run", "build_runner", "build")
    sh("flutter", "build", "appbundle", "--release")
    upload_to_play_store(
      aab: "build/app/outputs/bundle/release/app-release.aab",
    )
  end
end
